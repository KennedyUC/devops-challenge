name: Vue Application Workflow

on:
  push:
    branches:
      - dev
      - stg
      - main

env: 
  IMG_TAG: ${{ github.sha | slice(0,4) }}
  PROJECT_NAME: devops-challenge
  API_DEPLOYMENT: flask-api
  WEB_DEPLOYMENT: vue-web

jobs:
  extract_branch:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set Branch Name
      id: branch_name
      run: echo "::set-output name=branch::$(echo $GITHUB_REF | awk -F'/' '{print $3}')"

    - name: Display Branch Name
      run: echo "The branch name is ${{ steps.branch_name.outputs.branch }}"

  build-and-push-containers:
    runs-on: ubuntu-20.04
    needs: extract_branch

    steps:
    - name: Checkout GitHub Action
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set the Environment Name
      run: |
        if [ "${{ needs.extract_branch.outputs.branch }}" == "main" ]; then
          echo "::set-env name=ENV::prod"
        else
          echo "::set-env name=ENV::${{ needs.extract_branch.outputs.branch }}"
        fi
        echo "The environment is $ENV"

    - name: Create .env for the Flask App
      run: |
        echo 'Creating Flask App .env file for ${{ env.ENV }} environment'
        pushd "components/api"; echo ZONE_ID=${{ secrets.ZONE_ID }} > .env; popd;
        pushd "components/api"; echo CF_API_KEY=${{ secrets.CF_API_KEY }} >> .env; popd;
        pushd "components/api"; echo CF_API_EMAIL=${{ secrets.CF_API_EMAIL }} >> .env; popd;
        
    - name: Create .env file for Vue Web App
      run: |
        echo 'Creating Vue Web App .env file for ${{ env.ENV }} environment'
        pushd "components/web"; echo VUE_APP_PROXY_URL=http://127.0.0.1:5000/ > .env; popd;

    - name: Install Skaffold for App Builds
      run: |
        curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
        sudo install skaffold /usr/local/bin/

    - name: Authenticate to Docker Registry
      run: |
        make docker-login DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}

    - name: Build the Project Container Images
      run: |
        make skaffold-build DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} TAG=${{ env.IMG_TAG }} ENV=${{ env.ENV }}

  # build-infrastructure:
  #   needs: build-and-push-containers
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - name: Checkout GitHub Action
  #     uses: actions/checkout@v3
  #     with:
  #       token: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Initialize Terraform Modules
  #     run: pushd "terraform"; terraform init; popd;

  #   - name: Configure AWS CLI
  #     run: |
  #       aws configure set aws_access_key_id ${{secrets.AWS_ACCESS_KEY }} --profile default
  #       aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }} --profile default
  #       aws configure set default.region ${{ secrets.AWS_REGION }} --profile default
  #       aws configure set default.output csv --profile default

  #   - name: Provision EKS with Terraform apply
  #     run: |
  #       terraform apply -auto-approve -var-file="vars.tfvars" -var="user_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
  #                                     -var="user_secret_key=${{ secrets.AWS_SECRET_KEY }}" -var="aws_region=${{ secrets.AWS_REGION }}" \
  #                                     -var="env=${{ env.ENV }} -var="project_name=${{ env.PROJECT_NAME }}"

  # deploy-application:
  #   needs: build-infrastructure
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - name: Checkout GitHub Action
  #     uses: actions/checkout@v3
  #     with:
  #       token: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Configure AWS CLI
  #     run: |
  #       aws configure set aws_access_key_id ${{secrets.AWS_ACCESS_KEY }} --profile default
  #       aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }} --profile default
  #       aws configure set default.region ${{ secrets.AWS_REGION }} --profile default
  #       aws configure set default.output csv --profile default

  #   - name: Authenticate to AWS EKS
  #     run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ env.PROJECT_NAME }}-${{ env.ENV }}

  #   - name: Install yq for updating the deployment manifests
  #     run: |
  #       sudo apt-get update
  #       sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
  #       sudo chmod a+x /usr/local/bin/

  #   - name: Update kubernetes deployment manifest
  #     run: |
  #       yq e -i '.spec.template.spec.containers[0].image = "${{ secrets.DOCKER_USERNAME }}/flask-api:${{ env.ENV }}-${{ env.IMG_TAG }}"' kubernetes/api-deployment.yaml
  #       yq e -i '.spec.template.spec.containers[0].image = "${{ secrets.DOCKER_USERNAME }}/vue-web:${{ env.ENV }}-${{ env.IMG_TAG }}"' kubernetes/web-deployment.yaml

  #   - name: Deploy application to EKS
  #     run: make deploy-apps

  #   - name: View Application Rollout Status
  #     run: |
  #       kubectl rollout status deployment/${{ env.API_DEPLOYMENT }}
  #       kubectl rollout status deployment/${{ env.WEB_DEPLOYMENT }}